{"remainingRequest":"C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\code\\iview-admin\\src\\components\\split-pane\\split.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"C:\\work\\code\\iview-admin\\src\\components\\split-pane\\split.vue","mtime":1535094297031},{"path":"C:\\work\\code\\iview-admin\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\less-loader\\dist\\cjs.js","mtime":1535091217651},{"path":"C:\\work\\code\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535091260613},{"path":"C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n@import './index.less';\r\n",{"version":3,"sources":["split.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA","file":"split.vue","sourceRoot":"src\\components\\split-pane","sourcesContent":["<template>\r\n  <div ref=\"outerWrapper\" :class=\"wrapperClasses\">\r\n    <div v-if=\"isHorizontal\" :class=\"`${prefix}-horizontal`\">\r\n      <div :style=\"{right: `${anotherOffset}%`}\" :class=\"[`${prefix}-pane`, 'left-pane']\"><slot name=\"left\"/></div>\r\n      <div :class=\"`${prefix}-trigger-con`\" :style=\"{left: `${offset}%`}\" @mousedown=\"handleMousedown\">\r\n        <slot name=\"trigger\">\r\n          <trigger mode=\"vertical\"/>\r\n        </slot>\r\n      </div>\r\n      <div :style=\"{left: `${offset}%`}\" :class=\"[`${prefix}-pane`, 'right-pane']\"><slot name=\"right\"/></div>\r\n    </div>\r\n    <div v-else :class=\"`${prefix}-vertical`\">\r\n      <div :style=\"{bottom: `${anotherOffset}%`}\" :class=\"[`${prefix}-pane`, 'top-pane']\"><slot name=\"top\"/></div>\r\n     <div :class=\"`${prefix}-trigger-con`\" :style=\"{top: `${offset}%`}\" @mousedown=\"handleMousedown\">\r\n        <slot name=\"trigger\">\r\n          <trigger mode=\"horizontal\"/>\r\n        </slot>\r\n      </div>\r\n      <div :style=\"{top: `${offset}%`}\" :class=\"[`${prefix}-pane`, 'bottom-pane']\"><slot name=\"bottom\"/></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { oneOf, on, off } from '@/libs/tools'\r\nimport Trigger from './trigger.vue'\r\nexport default {\r\n  name: 'SplitPane',\r\n  components: {\r\n    Trigger\r\n  },\r\n  props: {\r\n    value: {\r\n      type: [Number, String],\r\n      default: 0.5\r\n    },\r\n    mode: {\r\n      validator (value) {\r\n        return oneOf(value, ['horizontal', 'vertical'])\r\n      },\r\n      default: 'horizontal'\r\n    },\r\n    min: {\r\n      type: [Number, String],\r\n      default: '40px'\r\n    },\r\n    max: {\r\n      type: [Number, String],\r\n      default: '40px'\r\n    }\r\n  },\r\n  /**\r\n   * Events\r\n   * @on-move-start\r\n   * @on-moving 返回值：事件对象，但是在事件对象中加入了两个参数：atMin(当前是否在最小值处), atMax(当前是否在最大值处)\r\n   * @on-move-end\r\n   */\r\n  data () {\r\n    return {\r\n      prefix: 'ivu-split',\r\n      offset: 0,\r\n      oldOffset: 0,\r\n      isMoving: false\r\n    }\r\n  },\r\n  computed: {\r\n    wrapperClasses () {\r\n      return [\r\n        `${this.prefix}-wrapper`,\r\n        this.isMoving ? 'no-select' : ''\r\n      ]\r\n    },\r\n    isHorizontal () {\r\n      return this.mode === 'horizontal'\r\n    },\r\n    anotherOffset () {\r\n      return 100 - this.offset\r\n    },\r\n    valueIsPx () {\r\n      return typeof this.value === 'string'\r\n    },\r\n    offsetSize () {\r\n      return this.isHorizontal ? 'offsetWidth' : 'offsetHeight'\r\n    },\r\n    computedMin () {\r\n      return this.getComputedThresholdValue('min')\r\n    },\r\n    computedMax () {\r\n      return this.getComputedThresholdValue('max')\r\n    }\r\n  },\r\n  methods: {\r\n    px2percent (numerator, denominator) {\r\n      return parseFloat(numerator) / parseFloat(denominator)\r\n    },\r\n    getComputedThresholdValue (type) {\r\n      let size = this.$refs.outerWrapper[this.offsetSize]\r\n      if (this.valueIsPx) return typeof this[type] === 'string' ? this[type] : size * this[type]\r\n      else return typeof this[type] === 'string' ? this.px2percent(this[type], size) : this[type]\r\n    },\r\n    getMin (value1, value2) {\r\n      if (this.valueIsPx) return `${Math.min(parseFloat(value1), parseFloat(value2))}px`\r\n      else return Math.min(value1, value2)\r\n    },\r\n    getMax (value1, value2) {\r\n      if (this.valueIsPx) return `${Math.max(parseFloat(value1), parseFloat(value2))}px`\r\n      else return Math.max(value1, value2)\r\n    },\r\n    getAnotherOffset (value) {\r\n      let res = 0\r\n      if (this.valueIsPx) res = `${this.$refs.outerWrapper[this.offsetSize] - parseFloat(value)}px`\r\n      else res = 1 - value\r\n      return res\r\n    },\r\n    handleMove (e) {\r\n      let pageOffset = this.isHorizontal ? e.pageX : e.pageY\r\n      let offset = pageOffset - this.initOffset\r\n      let outerWidth = this.$refs.outerWrapper[this.offsetSize]\r\n      let value = this.valueIsPx ? `${parseFloat(this.oldOffset) + offset}px` : (this.px2percent(outerWidth * this.oldOffset + offset, outerWidth))\r\n      let anotherValue = this.getAnotherOffset(value)\r\n      if (parseFloat(value) <= parseFloat(this.computedMin)) value = this.getMax(value, this.computedMin)\r\n      if (parseFloat(anotherValue) <= parseFloat(this.computedMax)) value = this.getAnotherOffset(this.getMax(anotherValue, this.computedMax))\r\n      e.atMin = this.value === this.computedMin\r\n      e.atMax = this.valueIsPx ? this.getAnotherOffset(this.value) === this.computedMax : this.getAnotherOffset(this.value).toFixed(5) === this.computedMax.toFixed(5)\r\n      this.$emit('input', value)\r\n      this.$emit('on-moving', e)\r\n    },\r\n    handleUp () {\r\n      this.isMoving = false\r\n      off(document, 'mousemove', this.handleMove)\r\n      off(document, 'mouseup', this.handleUp)\r\n      this.$emit('on-move-end')\r\n    },\r\n    handleMousedown (e) {\r\n      this.initOffset = this.isHorizontal ? e.pageX : e.pageY\r\n      this.oldOffset = this.value\r\n      this.isMoving = true\r\n      on(document, 'mousemove', this.handleMove)\r\n      on(document, 'mouseup', this.handleUp)\r\n      this.$emit('on-move-start')\r\n    }\r\n  },\r\n  watch: {\r\n    value () {\r\n      this.offset = (this.valueIsPx ? this.px2percent(this.value, this.$refs.outerWrapper[this.offsetSize]) : this.value) * 10000 / 100\r\n    }\r\n  },\r\n  mounted () {\r\n    this.$nextTick(() => {\r\n      this.offset = (this.valueIsPx ? this.px2percent(this.value, this.$refs.outerWrapper[this.offsetSize]) : this.value) * 10000 / 100\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n@import './index.less';\r\n</style>\r\n"]}]}