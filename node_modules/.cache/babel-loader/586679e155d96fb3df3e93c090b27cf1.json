{"remainingRequest":"C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\code\\iview-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\work\\code\\iview-admin\\src\\libs\\tools.js","dependencies":[{"path":"C:\\work\\code\\iview-admin\\src\\libs\\tools.js","mtime":1535094297188},{"path":"C:\\work\\code\\iview-admin\\.babelrc","mtime":1535094296553},{"path":"C:\\work\\code\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535091260613},{"path":"C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _toConsumableArray from \"C:\\\\work\\\\code\\\\iview-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.array.from\";\nexport var forEach = function forEach(arr, fn) {\n  if (!arr.length || !fn) return;\n  var i = -1;\n  var len = arr.length;\n\n  while (++i < len) {\n    var item = arr[i];\n    fn(item, i, arr);\n  }\n};\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的交集, 两个数组的元素为数值或字符串\r\n */\n\nexport var getIntersection = function getIntersection(arr1, arr2) {\n  var len = Math.min(arr1.length, arr2.length);\n  var i = -1;\n  var res = [];\n\n  while (++i < len) {\n    var item = arr2[i];\n    if (arr1.indexOf(item) > -1) res.push(item);\n  }\n\n  return res;\n};\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的并集, 两个数组的元素为数值或字符串\r\n */\n\nexport var getUnion = function getUnion(arr1, arr2) {\n  return Array.from(new Set(_toConsumableArray(arr1).concat(_toConsumableArray(arr2))));\n};\n/**\r\n * @param {Array} target 目标数组\r\n * @param {Array} arr 需要查询的数组\r\n * @description 判断要查询的数组是否至少有一个元素包含在目标数组中\r\n */\n\nexport var hasOneOf = function hasOneOf(target, arr) {\n  return target.some(function (_) {\n    return arr.indexOf(_) > -1;\n  });\n};\n/**\r\n * @param {String|Number} value 要验证的字符串或数值\r\n * @param {*} validList 用来验证的列表\r\n */\n\nexport function oneOf(value, validList) {\n  for (var i = 0; i < validList.length; i++) {\n    if (value === validList[i]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * @param {Number} timeStamp 判断时间戳格式是否是毫秒\r\n * @returns {Boolean}\r\n */\n\nvar isMillisecond = function isMillisecond(timeStamp) {\n  var timeStr = String(timeStamp);\n  return timeStr.length > 10;\n};\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} currentTime 当前时间时间戳\r\n * @returns {Boolean} 传入的时间戳是否早于当前时间戳\r\n */\n\n\nvar isEarly = function isEarly(timeStamp, currentTime) {\n  return timeStamp < currentTime;\n};\n/**\r\n * @param {Number} num 数值\r\n * @returns {String} 处理后的字符串\r\n * @description 如果传入的数值小于10，即位数只有1位，则在前面补充0\r\n */\n\n\nvar getHandledValue = function getHandledValue(num) {\n  return num < 10 ? '0' + num : num;\n};\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} startType 要返回的时间字符串的格式类型，传入'year'则返回年开头的完整时间\r\n */\n\n\nvar getDate = function getDate(timeStamp, startType) {\n  var d = new Date(timeStamp * 1000);\n  var year = d.getFullYear();\n  var month = getHandledValue(d.getMonth() + 1);\n  var date = getHandledValue(d.getDate());\n  var hours = getHandledValue(d.getHours());\n  var minutes = getHandledValue(d.getMinutes());\n  var second = getHandledValue(d.getSeconds());\n  var resStr = '';\n  if (startType === 'year') resStr = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + second;else resStr = month + '-' + date + ' ' + hours + ':' + minutes;\n  return resStr;\n};\n/**\r\n * @param {String|Number} timeStamp 时间戳\r\n * @returns {String} 相对时间字符串\r\n */\n\n\nexport var getRelativeTime = function getRelativeTime(timeStamp) {\n  // 判断当前传入的时间戳是秒格式还是毫秒\n  var IS_MILLISECOND = isMillisecond(timeStamp); // 如果是毫秒格式则转为秒格式\n\n  if (IS_MILLISECOND) Math.floor(timeStamp /= 1000); // 传入的时间戳可以是数值或字符串类型，这里统一转为数值类型\n\n  timeStamp = Number(timeStamp); // 获取当前时间时间戳\n\n  var currentTime = Math.floor(Date.parse(new Date()) / 1000); // 判断传入时间戳是否早于当前时间戳\n\n  var IS_EARLY = isEarly(timeStamp, currentTime); // 获取两个时间戳差值\n\n  var diff = currentTime - timeStamp; // 如果IS_EARLY为false则差值取反\n\n  if (!IS_EARLY) diff = -diff;\n  var resStr = '';\n  var dirStr = IS_EARLY ? '前' : '后'; // 少于等于59秒\n\n  if (diff <= 59) resStr = diff + '秒' + dirStr; // 多于59秒，少于等于59分钟59秒\n  else if (diff > 59 && diff <= 3599) resStr = Math.floor(diff / 60) + '分钟' + dirStr; // 多于59分钟59秒，少于等于23小时59分钟59秒\n    else if (diff > 3599 && diff <= 86399) resStr = Math.floor(diff / 3600) + '小时' + dirStr; // 多于23小时59分钟59秒，少于等于29天59分钟59秒\n      else if (diff > 86399 && diff <= 2623859) resStr = Math.floor(diff / 86400) + '天' + dirStr; // 多于29天59分钟59秒，少于364天23小时59分钟59秒，且传入的时间戳早于当前\n        else if (diff > 2623859 && diff <= 31567859 && IS_EARLY) resStr = getDate(timeStamp);else resStr = getDate(timeStamp, 'year');\n  return resStr;\n};\n/**\r\n * @returns {String} 当前浏览器名称\r\n */\n\nexport var getExplorer = function getExplorer() {\n  var ua = window.navigator.userAgent;\n\n  var isExplorer = function isExplorer(exp) {\n    return ua.indexOf(exp) > -1;\n  };\n\n  if (isExplorer('MSIE')) return 'IE';else if (isExplorer('Firefox')) return 'Firefox';else if (isExplorer('Chrome')) return 'Chrome';else if (isExplorer('Opera')) return 'Opera';else if (isExplorer('Safari')) return 'Safari';\n};\n/**\r\n * @description 绑定事件 on(element, event, handler)\r\n */\n\nexport var on = function () {\n  if (document.addEventListener) {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.addEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.attachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n/**\r\n * @description 解绑事件 off(element, event, handler)\r\n */\n\nexport var off = function () {\n  if (document.removeEventListener) {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.removeEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.detachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n/**\r\n * 判断一个对象是否存在key，如果传入第二个参数key，则是判断这个obj对象是否存在key这个属性\r\n * 如果没有传入key这个参数，则判断obj对象是否有键值对\r\n */\n\nexport var hasKey = function hasKey(obj, key) {\n  if (key) return key in obj;else {\n    var keysArr = Object.keys(obj);\n    return keysArr.length;\n  }\n};\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\n\nexport var objEqual = function objEqual(obj1, obj2) {\n  var keysArr1 = Object.keys(obj1);\n  var keysArr2 = Object.keys(obj2);\n  if (keysArr1.length !== keysArr2.length) return false;else if (keysArr1.length === 0 && keysArr2.length === 0) return true;\n  /* eslint-disable-next-line */\n  else return !keysArr1.some(function (key) {\n      return obj1[key] != obj2[key];\n    });\n};",{"version":3,"sources":["src\\libs\\tools.js"],"names":["forEach","arr","fn","length","i","len","item","getIntersection","arr1","arr2","Math","min","res","indexOf","push","getUnion","Array","from","Set","hasOneOf","target","some","_","oneOf","value","validList","isMillisecond","timeStr","String","timeStamp","isEarly","currentTime","getHandledValue","num","getDate","startType","d","Date","year","getFullYear","month","getMonth","date","hours","getHours","minutes","getMinutes","second","getSeconds","resStr","getRelativeTime","IS_MILLISECOND","floor","Number","parse","IS_EARLY","diff","dirStr","getExplorer","ua","window","navigator","userAgent","isExplorer","exp","on","document","addEventListener","element","event","handler","attachEvent","off","removeEventListener","detachEvent","hasKey","obj","key","keysArr","Object","keys","objEqual","obj1","obj2","keysArr1","keysArr2"],"mappings":"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","sourceRoot":"C:\\work\\code\\iview-admin","sourcesContent":["export const forEach = (arr, fn) => {\r\n  if (!arr.length || !fn) return\r\n  let i = -1\r\n  let len = arr.length\r\n  while (++i < len) {\r\n    let item = arr[i]\r\n    fn(item, i, arr)\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的交集, 两个数组的元素为数值或字符串\r\n */\r\nexport const getIntersection = (arr1, arr2) => {\r\n  let len = Math.min(arr1.length, arr2.length)\r\n  let i = -1\r\n  let res = []\r\n  while (++i < len) {\r\n    const item = arr2[i]\r\n    if (arr1.indexOf(item) > -1) res.push(item)\r\n  }\r\n  return res\r\n}\r\n\r\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的并集, 两个数组的元素为数值或字符串\r\n */\r\nexport const getUnion = (arr1, arr2) => {\r\n  return Array.from(new Set([...arr1, ...arr2]))\r\n}\r\n\r\n/**\r\n * @param {Array} target 目标数组\r\n * @param {Array} arr 需要查询的数组\r\n * @description 判断要查询的数组是否至少有一个元素包含在目标数组中\r\n */\r\nexport const hasOneOf = (target, arr) => {\r\n  return target.some(_ => arr.indexOf(_) > -1)\r\n}\r\n\r\n/**\r\n * @param {String|Number} value 要验证的字符串或数值\r\n * @param {*} validList 用来验证的列表\r\n */\r\nexport function oneOf (value, validList) {\r\n  for (let i = 0; i < validList.length; i++) {\r\n    if (value === validList[i]) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n/**\r\n * @param {Number} timeStamp 判断时间戳格式是否是毫秒\r\n * @returns {Boolean}\r\n */\r\nconst isMillisecond = timeStamp => {\r\n  const timeStr = String(timeStamp)\r\n  return timeStr.length > 10\r\n}\r\n\r\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} currentTime 当前时间时间戳\r\n * @returns {Boolean} 传入的时间戳是否早于当前时间戳\r\n */\r\nconst isEarly = (timeStamp, currentTime) => {\r\n  return timeStamp < currentTime\r\n}\r\n\r\n/**\r\n * @param {Number} num 数值\r\n * @returns {String} 处理后的字符串\r\n * @description 如果传入的数值小于10，即位数只有1位，则在前面补充0\r\n */\r\nconst getHandledValue = num => {\r\n  return num < 10 ? '0' + num : num\r\n}\r\n\r\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} startType 要返回的时间字符串的格式类型，传入'year'则返回年开头的完整时间\r\n */\r\nconst getDate = (timeStamp, startType) => {\r\n  const d = new Date(timeStamp * 1000)\r\n  const year = d.getFullYear()\r\n  const month = getHandledValue(d.getMonth() + 1)\r\n  const date = getHandledValue(d.getDate())\r\n  const hours = getHandledValue(d.getHours())\r\n  const minutes = getHandledValue(d.getMinutes())\r\n  const second = getHandledValue(d.getSeconds())\r\n  let resStr = ''\r\n  if (startType === 'year') resStr = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + second\r\n  else resStr = month + '-' + date + ' ' + hours + ':' + minutes\r\n  return resStr\r\n}\r\n\r\n/**\r\n * @param {String|Number} timeStamp 时间戳\r\n * @returns {String} 相对时间字符串\r\n */\r\nexport const getRelativeTime = timeStamp => {\r\n  // 判断当前传入的时间戳是秒格式还是毫秒\r\n  const IS_MILLISECOND = isMillisecond(timeStamp)\r\n  // 如果是毫秒格式则转为秒格式\r\n  if (IS_MILLISECOND) Math.floor(timeStamp /= 1000)\r\n  // 传入的时间戳可以是数值或字符串类型，这里统一转为数值类型\r\n  timeStamp = Number(timeStamp)\r\n  // 获取当前时间时间戳\r\n  const currentTime = Math.floor(Date.parse(new Date()) / 1000)\r\n  // 判断传入时间戳是否早于当前时间戳\r\n  const IS_EARLY = isEarly(timeStamp, currentTime)\r\n  // 获取两个时间戳差值\r\n  let diff = currentTime - timeStamp\r\n  // 如果IS_EARLY为false则差值取反\r\n  if (!IS_EARLY) diff = -diff\r\n  let resStr = ''\r\n  const dirStr = IS_EARLY ? '前' : '后'\r\n  // 少于等于59秒\r\n  if (diff <= 59) resStr = diff + '秒' + dirStr\r\n  // 多于59秒，少于等于59分钟59秒\r\n  else if (diff > 59 && diff <= 3599) resStr = Math.floor(diff / 60) + '分钟' + dirStr\r\n  // 多于59分钟59秒，少于等于23小时59分钟59秒\r\n  else if (diff > 3599 && diff <= 86399) resStr = Math.floor(diff / 3600) + '小时' + dirStr\r\n  // 多于23小时59分钟59秒，少于等于29天59分钟59秒\r\n  else if (diff > 86399 && diff <= 2623859) resStr = Math.floor(diff / 86400) + '天' + dirStr\r\n  // 多于29天59分钟59秒，少于364天23小时59分钟59秒，且传入的时间戳早于当前\r\n  else if (diff > 2623859 && diff <= 31567859 && IS_EARLY) resStr = getDate(timeStamp)\r\n  else resStr = getDate(timeStamp, 'year')\r\n  return resStr\r\n}\r\n\r\n/**\r\n * @returns {String} 当前浏览器名称\r\n */\r\nexport const getExplorer = () => {\r\n  const ua = window.navigator.userAgent\r\n  const isExplorer = (exp) => {\r\n    return ua.indexOf(exp) > -1\r\n  }\r\n  if (isExplorer('MSIE')) return 'IE'\r\n  else if (isExplorer('Firefox')) return 'Firefox'\r\n  else if (isExplorer('Chrome')) return 'Chrome'\r\n  else if (isExplorer('Opera')) return 'Opera'\r\n  else if (isExplorer('Safari')) return 'Safari'\r\n}\r\n\r\n/**\r\n * @description 绑定事件 on(element, event, handler)\r\n */\r\nexport const on = (function () {\r\n  if (document.addEventListener) {\r\n    return function (element, event, handler) {\r\n      if (element && event && handler) {\r\n        element.addEventListener(event, handler, false)\r\n      }\r\n    }\r\n  } else {\r\n    return function (element, event, handler) {\r\n      if (element && event && handler) {\r\n        element.attachEvent('on' + event, handler)\r\n      }\r\n    }\r\n  }\r\n})()\r\n\r\n/**\r\n * @description 解绑事件 off(element, event, handler)\r\n */\r\nexport const off = (function () {\r\n  if (document.removeEventListener) {\r\n    return function (element, event, handler) {\r\n      if (element && event) {\r\n        element.removeEventListener(event, handler, false)\r\n      }\r\n    }\r\n  } else {\r\n    return function (element, event, handler) {\r\n      if (element && event) {\r\n        element.detachEvent('on' + event, handler)\r\n      }\r\n    }\r\n  }\r\n})()\r\n\r\n/**\r\n * 判断一个对象是否存在key，如果传入第二个参数key，则是判断这个obj对象是否存在key这个属性\r\n * 如果没有传入key这个参数，则判断obj对象是否有键值对\r\n */\r\nexport const hasKey = (obj, key) => {\r\n  if (key) return key in obj\r\n  else {\r\n    let keysArr = Object.keys(obj)\r\n    return keysArr.length\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\r\nexport const objEqual = (obj1, obj2) => {\r\n  const keysArr1 = Object.keys(obj1)\r\n  const keysArr2 = Object.keys(obj2)\r\n  if (keysArr1.length !== keysArr2.length) return false\r\n  else if (keysArr1.length === 0 && keysArr2.length === 0) return true\r\n  /* eslint-disable-next-line */\r\n  else return !keysArr1.some(key => obj1[key] != obj2[key])\r\n}\r\n"]}]}