{"remainingRequest":"C:\\work\\code\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\code\\iview-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\work\\code\\iview-admin\\src\\libs\\tools.js","dependencies":[{"path":"C:\\work\\code\\iview-admin\\src\\libs\\tools.js","mtime":1535094297188},{"path":"C:\\work\\code\\iview-admin\\.babelrc","mtime":1535094296553},{"path":"C:\\work\\code\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535091260613},{"path":"C:\\work\\code\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _toConsumableArray from \"C:\\\\work\\\\code\\\\iview-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.array.from\";\nexport var forEach = function forEach(arr, fn) {\n  if (!arr.length || !fn) return;\n  var i = -1;\n  var len = arr.length;\n\n  while (++i < len) {\n    var item = arr[i];\n    fn(item, i, arr);\n  }\n};\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的交集, 两个数组的元素为数值或字符串\r\n */\n\nexport var getIntersection = function getIntersection(arr1, arr2) {\n  var len = Math.min(arr1.length, arr2.length);\n  var i = -1;\n  var res = [];\n\n  while (++i < len) {\n    var item = arr2[i];\n    if (arr1.indexOf(item) > -1) res.push(item);\n  }\n\n  return res;\n};\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的并集, 两个数组的元素为数值或字符串\r\n */\n\nexport var getUnion = function getUnion(arr1, arr2) {\n  return Array.from(new Set(_toConsumableArray(arr1).concat(_toConsumableArray(arr2))));\n};\n/**\r\n * @param {Array} target 目标数组\r\n * @param {Array} arr 需要查询的数组\r\n * @description 判断要查询的数组是否至少有一个元素包含在目标数组中\r\n */\n\nexport var hasOneOf = function hasOneOf(target, arr) {\n  return target.some(function (_) {\n    return arr.indexOf(_) > -1;\n  });\n};\n/**\r\n * @param {String|Number} value 要验证的字符串或数值\r\n * @param {*} validList 用来验证的列表\r\n */\n\nexport function oneOf(value, validList) {\n  for (var i = 0; i < validList.length; i++) {\n    if (value === validList[i]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * @param {Number} timeStamp 判断时间戳格式是否是毫秒\r\n * @returns {Boolean}\r\n */\n\nvar isMillisecond = function isMillisecond(timeStamp) {\n  var timeStr = String(timeStamp);\n  return timeStr.length > 10;\n};\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} currentTime 当前时间时间戳\r\n * @returns {Boolean} 传入的时间戳是否早于当前时间戳\r\n */\n\n\nvar isEarly = function isEarly(timeStamp, currentTime) {\n  return timeStamp < currentTime;\n};\n/**\r\n * @param {Number} num 数值\r\n * @returns {String} 处理后的字符串\r\n * @description 如果传入的数值小于10，即位数只有1位，则在前面补充0\r\n */\n\n\nvar getHandledValue = function getHandledValue(num) {\n  return num < 10 ? '0' + num : num;\n};\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} startType 要返回的时间字符串的格式类型，传入'year'则返回年开头的完整时间\r\n */\n\n\nvar getDate = function getDate(timeStamp, startType) {\n  var d = new Date(timeStamp * 1000);\n  var year = d.getFullYear();\n  var month = getHandledValue(d.getMonth() + 1);\n  var date = getHandledValue(d.getDate());\n  var hours = getHandledValue(d.getHours());\n  var minutes = getHandledValue(d.getMinutes());\n  var second = getHandledValue(d.getSeconds());\n  var resStr = '';\n  if (startType === 'year') resStr = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + second;else resStr = month + '-' + date + ' ' + hours + ':' + minutes;\n  return resStr;\n};\n/**\r\n * @param {String|Number} timeStamp 时间戳\r\n * @returns {String} 相对时间字符串\r\n */\n\n\nexport var getRelativeTime = function getRelativeTime(timeStamp) {\n  // 判断当前传入的时间戳是秒格式还是毫秒\n  var IS_MILLISECOND = isMillisecond(timeStamp); // 如果是毫秒格式则转为秒格式\n\n  if (IS_MILLISECOND) Math.floor(timeStamp /= 1000); // 传入的时间戳可以是数值或字符串类型，这里统一转为数值类型\n\n  timeStamp = Number(timeStamp); // 获取当前时间时间戳\n\n  var currentTime = Math.floor(Date.parse(new Date()) / 1000); // 判断传入时间戳是否早于当前时间戳\n\n  var IS_EARLY = isEarly(timeStamp, currentTime); // 获取两个时间戳差值\n\n  var diff = currentTime - timeStamp; // 如果IS_EARLY为false则差值取反\n\n  if (!IS_EARLY) diff = -diff;\n  var resStr = '';\n  var dirStr = IS_EARLY ? '前' : '后'; // 少于等于59秒\n\n  if (diff <= 59) resStr = diff + '秒' + dirStr; // 多于59秒，少于等于59分钟59秒\n  else if (diff > 59 && diff <= 3599) resStr = Math.floor(diff / 60) + '分钟' + dirStr; // 多于59分钟59秒，少于等于23小时59分钟59秒\n    else if (diff > 3599 && diff <= 86399) resStr = Math.floor(diff / 3600) + '小时' + dirStr; // 多于23小时59分钟59秒，少于等于29天59分钟59秒\n      else if (diff > 86399 && diff <= 2623859) resStr = Math.floor(diff / 86400) + '天' + dirStr; // 多于29天59分钟59秒，少于364天23小时59分钟59秒，且传入的时间戳早于当前\n        else if (diff > 2623859 && diff <= 31567859 && IS_EARLY) resStr = getDate(timeStamp);else resStr = getDate(timeStamp, 'year');\n  return resStr;\n};\n/**\r\n * @returns {String} 当前浏览器名称\r\n */\n\nexport var getExplorer = function getExplorer() {\n  var ua = window.navigator.userAgent;\n\n  var isExplorer = function isExplorer(exp) {\n    return ua.indexOf(exp) > -1;\n  };\n\n  if (isExplorer('MSIE')) return 'IE';else if (isExplorer('Firefox')) return 'Firefox';else if (isExplorer('Chrome')) return 'Chrome';else if (isExplorer('Opera')) return 'Opera';else if (isExplorer('Safari')) return 'Safari';\n};\n/**\r\n * @description 绑定事件 on(element, event, handler)\r\n */\n\nexport var on = function () {\n  if (document.addEventListener) {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.addEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.attachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n/**\r\n * @description 解绑事件 off(element, event, handler)\r\n */\n\nexport var off = function () {\n  if (document.removeEventListener) {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.removeEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.detachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n/**\r\n * 判断一个对象是否存在key，如果传入第二个参数key，则是判断这个obj对象是否存在key这个属性\r\n * 如果没有传入key这个参数，则判断obj对象是否有键值对\r\n */\n\nexport var hasKey = function hasKey(obj, key) {\n  if (key) return key in obj;else {\n    var keysArr = Object.keys(obj);\n    return keysArr.length;\n  }\n};\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\n\nexport var objEqual = function objEqual(obj1, obj2) {\n  var keysArr1 = Object.keys(obj1);\n  var keysArr2 = Object.keys(obj2);\n  if (keysArr1.length !== keysArr2.length) return false;else if (keysArr1.length === 0 && keysArr2.length === 0) return true;\n  /* eslint-disable-next-line */\n  else return !keysArr1.some(function (key) {\n      return obj1[key] != obj2[key];\n    });\n};",null]}