{"remainingRequest":"C:\\work\\code\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\code\\iview-admin\\src\\components\\tables\\tables.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\code\\iview-admin\\src\\components\\tables\\tables.vue","mtime":1536047888440},{"path":"C:\\work\\code\\iview-admin\\.babelrc","mtime":1535094296553},{"path":"C:\\work\\code\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535091260613},{"path":"C:\\work\\code\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TablesEdit from './edit.vue';\nimport handleBtns from './handle-btns';\nimport './index.less';\nexport default {\n  name: 'Tables',\n  props: {\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    columns: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    size: String,\n    width: {\n      type: [Number, String]\n    },\n    height: {\n      type: [Number, String]\n    },\n    stripe: {\n      type: Boolean,\n      default: false\n    },\n    border: {\n      type: Boolean,\n      default: false\n    },\n    showHeader: {\n      type: Boolean,\n      default: true\n    },\n    highlightRow: {\n      type: Boolean,\n      default: false\n    },\n    rowClassName: {\n      type: Function,\n      default: function _default() {\n        return '';\n      }\n    },\n    context: {\n      type: Object\n    },\n    noDataText: {\n      type: String\n    },\n    noFilteredDataText: {\n      type: String\n    },\n    disabledHover: {\n      type: Boolean\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * @description 全局设置是否可编辑\n     */\n    editable: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * @description 是否可搜索\n     */\n    searchable: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * @description 搜索控件所在位置，'top' / 'bottom'\n     */\n    searchPlace: {\n      type: String,\n      default: 'top'\n    }\n  },\n\n  /**\n   * Events\n   * @on-start-edit 返回值 {Object} ：同iview中render函数中的params对象 { row, index, column }\n   * @on-cancel-edit 返回值 {Object} 同上\n   * @on-save-edit 返回值 {Object} ：除上面三个参数外，还有一个value: 修改后的数据\n   */\n  data: function data() {\n    return {\n      insideColumns: [],\n      insideTableData: [],\n      edittingCellId: '',\n      edittingText: '',\n      searchValue: '',\n      searchKey: ''\n    };\n  },\n  methods: {\n    suportEdit: function suportEdit(item, index) {\n      var _this = this;\n\n      item.render = function (h, params) {\n        return h(TablesEdit, {\n          props: {\n            params: params,\n            value: _this.insideTableData[params.index][params.column.key],\n            edittingCellId: _this.edittingCellId,\n            editable: _this.editable\n          },\n          on: {\n            'input': function input(val) {\n              _this.edittingText = val;\n            },\n            'on-start-edit': function onStartEdit(params) {\n              _this.edittingCellId = \"editting-\".concat(params.index, \"-\").concat(params.column.key);\n\n              _this.$emit('on-start-edit', params);\n            },\n            'on-cancel-edit': function onCancelEdit(params) {\n              _this.edittingCellId = '';\n\n              _this.$emit('on-cancel-edit', params);\n            },\n            'on-save-edit': function onSaveEdit(params) {\n              _this.value[params.row.initRowIndex][params.column.key] = _this.edittingText;\n\n              _this.$emit('input', _this.value);\n\n              _this.$emit('on-save-edit', Object.assign(params, {\n                value: _this.edittingText\n              }));\n\n              _this.edittingCellId = '';\n            }\n          }\n        });\n      };\n\n      return item;\n    },\n    surportHandle: function surportHandle(item) {\n      var _this2 = this;\n\n      var options = item.options || [];\n      var insideBtns = [];\n      options.forEach(function (item) {\n        if (handleBtns[item]) insideBtns.push(handleBtns[item]);\n      });\n      var btns = item.button ? [].concat(insideBtns, item.button) : insideBtns;\n\n      item.render = function (h, params) {\n        params.tableData = _this2.value;\n        return h('div', btns.map(function (item) {\n          return item(h, params, _this2);\n        }));\n      };\n\n      return item;\n    },\n    handleColumns: function handleColumns(columns) {\n      var _this3 = this;\n\n      this.insideColumns = columns.map(function (item, index) {\n        var res = item;\n        if (res.editable) res = _this3.suportEdit(res, index);\n        if (res.key === 'handle') res = _this3.surportHandle(res);\n        return res;\n      });\n    },\n    setDefaultSearchKey: function setDefaultSearchKey() {\n      this.searchKey = this.columns[0].key !== 'handle' ? this.columns[0].key : this.columns.length > 1 ? this.columns[1].key : '';\n    },\n    handleClear: function handleClear(e) {\n      if (e.target.value === '') this.insideTableData = this.value;\n    },\n    handleSearch: function handleSearch() {\n      var _this4 = this;\n\n      this.insideTableData = this.value.filter(function (item) {\n        return item[_this4.searchKey].indexOf(_this4.searchValue) > -1;\n      });\n    },\n    handleTableData: function handleTableData() {\n      this.insideTableData = this.value.map(function (item, index) {\n        var res = item;\n        res.initRowIndex = index;\n        return res;\n      });\n    },\n    exportCsv: function exportCsv(params) {\n      this.$refs.tablesMain.exportCsv(params);\n    },\n    clearCurrentRow: function clearCurrentRow() {\n      this.$refs.talbesMain.clearCurrentRow();\n    },\n    onCurrentChange: function onCurrentChange(currentRow, oldCurrentRow) {\n      this.$emit('on-current-change', currentRow, oldCurrentRow);\n    },\n    onSelect: function onSelect(selection, row) {\n      this.$emit('on-select', selection, row);\n    },\n    onSelectCancel: function onSelectCancel(selection, row) {\n      this.$emit('on-select-cancel', selection, row);\n    },\n    onSelectAll: function onSelectAll(selection) {\n      this.$emit('on-select-all', selection);\n    },\n    onSelectionChange: function onSelectionChange(selection) {\n      this.$emit('on-selection-change', selection);\n    },\n    onSortChange: function onSortChange(column, key, order) {\n      this.$emit('on-sort-change', column, key, order);\n    },\n    onFilterChange: function onFilterChange(row) {\n      this.$emit('on-filter-change', row);\n    },\n    onRowClick: function onRowClick(row, index) {\n      this.$emit('on-row-click', row, index);\n    },\n    onRowDblclick: function onRowDblclick(row, index) {\n      this.$emit('on-row-dblclick', row, index);\n    },\n    onExpand: function onExpand(row, status) {\n      this.$emit('on-expand', row, status);\n    }\n  },\n  watch: {\n    columns: function columns(_columns) {\n      this.handleColumns(_columns);\n      this.setDefaultSearchKey();\n    },\n    value: function value(val) {\n      this.handleTableData();\n      this.handleSearch();\n    }\n  },\n  mounted: function mounted() {\n    this.handleColumns(this.columns);\n    this.setDefaultSearchKey();\n    this.handleTableData();\n  }\n};",null]}