{"remainingRequest":"C:\\work\\code\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\code\\iview-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\work\\code\\iview-admin\\src\\libs\\excel.js","dependencies":[{"path":"C:\\work\\code\\iview-admin\\src\\libs\\excel.js","mtime":1535094297178},{"path":"C:\\work\\code\\iview-admin\\.babelrc","mtime":1535094296553},{"path":"C:\\work\\code\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535091260613},{"path":"C:\\work\\code\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\n/* eslint-disable */\nimport XLSX from 'xlsx';\n\nfunction auto_width(ws, data) {\n  /*set worksheet max width per col*/\n  var colWidth = data.map(function (row) {\n    return row.map(function (val) {\n      /*if null/undefined*/\n      if (val == null) {\n        return {\n          'wch': 10\n        };\n      }\n      /*if chinese*/\n      else if (val.toString().charCodeAt(0) > 255) {\n          return {\n            'wch': val.toString().length * 2\n          };\n        } else {\n          return {\n            'wch': val.toString().length\n          };\n        }\n    });\n  });\n  /*start in the first row*/\n\n  var result = colWidth[0];\n\n  for (var i = 1; i < colWidth.length; i++) {\n    for (var j = 0; j < colWidth[i].length; j++) {\n      if (result[j]['wch'] < colWidth[i][j]['wch']) {\n        result[j]['wch'] = colWidth[i][j]['wch'];\n      }\n    }\n  }\n\n  ws['!cols'] = result;\n}\n\nfunction json_to_array(key, jsonData) {\n  return jsonData.map(function (v) {\n    return key.map(function (j) {\n      return v[j];\n    });\n  });\n} // fix data,return string\n\n\nfunction fixdata(data) {\n  var o = '';\n  var l = 0;\n  var w = 10240;\n\n  for (; l < data.byteLength / w; ++l) {\n    o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));\n  }\n\n  o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\n  return o;\n} // get head from excel file,return array\n\n\nfunction get_header_row(sheet) {\n  var headers = [];\n  var range = XLSX.utils.decode_range(sheet['!ref']);\n  var C;\n  var R = range.s.r;\n  /* start in the first row */\n\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    var cell = sheet[XLSX.utils.encode_cell({\n      c: C,\n      r: R\n    })];\n    /* find the cell in the first row */\n\n    var hdr = 'UNKNOWN ' + C; // <-- replace with your desired default\n\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n\n  return headers;\n}\n\nexport var export_table_to_excel = function export_table_to_excel(id, filename) {\n  var table = document.getElementById(id);\n  var wb = XLSX.utils.table_to_book(table);\n  XLSX.writeFile(wb, filename);\n  /* the second way */\n  // const table = document.getElementById(id);\n  // const wb = XLSX.utils.book_new();\n  // const ws = XLSX.utils.table_to_sheet(table);\n  // XLSX.utils.book_append_sheet(wb, ws, filename);\n  // XLSX.writeFile(wb, filename);\n};\nexport var export_json_to_excel = function export_json_to_excel(_ref) {\n  var data = _ref.data,\n      key = _ref.key,\n      title = _ref.title,\n      filename = _ref.filename,\n      autoWidth = _ref.autoWidth;\n  var wb = XLSX.utils.book_new();\n  data.unshift(title);\n  var ws = XLSX.utils.json_to_sheet(data, {\n    header: key,\n    skipHeader: true\n  });\n\n  if (autoWidth) {\n    var arr = json_to_array(key, data);\n    auto_width(ws, arr);\n  }\n\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport var export_array_to_excel = function export_array_to_excel(_ref2) {\n  var key = _ref2.key,\n      data = _ref2.data,\n      title = _ref2.title,\n      filename = _ref2.filename,\n      autoWidth = _ref2.autoWidth;\n  var wb = XLSX.utils.book_new();\n  var arr = json_to_array(key, data);\n  arr.unshift(title);\n  var ws = XLSX.utils.aoa_to_sheet(arr);\n\n  if (autoWidth) {\n    auto_width(ws, arr);\n  }\n\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport var read = function read(data, type) {\n  /* if type == 'base64' must fix data first */\n  // const fixedData = fixdata(data)\n  // const workbook = XLSX.read(btoa(fixedData), { type: 'base64' })\n  var workbook = XLSX.read(data, {\n    type: type\n  });\n  var firstSheetName = workbook.SheetNames[0];\n  var worksheet = workbook.Sheets[firstSheetName];\n  var header = get_header_row(worksheet);\n  var results = XLSX.utils.sheet_to_json(worksheet);\n  return {\n    header: header,\n    results: results\n  };\n};\nexport default {\n  export_table_to_excel: export_table_to_excel,\n  export_array_to_excel: export_array_to_excel,\n  export_json_to_excel: export_json_to_excel,\n  read: read\n};",null]}