{"remainingRequest":"C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\code\\iview-admin\\src\\components\\paste-editor\\paste-editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\code\\iview-admin\\src\\components\\paste-editor\\paste-editor.vue","mtime":1535094296990},{"path":"C:\\work\\code\\iview-admin\\.babelrc","mtime":1535094296553},{"path":"C:\\work\\code\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535091260613},{"path":"C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\nimport CodeMirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport { forEach } from '@/libs/tools';\nimport createPlaceholder from './plugins/placeholder';\nexport default {\n  name: 'PasteEditor',\n  props: {\n    value: Array,\n    pasteData: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: '从网页或其他应用软件复制表格数据，粘贴到这里 。默认第一行是表头，使用回车键添加新行，使用Tab键区分列。'\n    }\n  },\n  data: function data() {\n    return {\n      pasteDataArr: [],\n      rowArrLength: 0,\n      editor: null\n    };\n  },\n  watch: {\n    pasteData: function pasteData(val) {\n      if (val === '') {\n        this.editor.setValue('');\n      }\n    }\n  },\n  computed: {\n    rowNum: function rowNum() {\n      return this.pasteDataArr.length;\n    },\n    colNum: function colNum() {\n      return this.pasteDataArr[0] ? this.pasteDataArr[0].length : 0;\n    }\n  },\n  methods: {\n    handleKeyup: function handleKeyup(e) {\n      this.handleAreaData();\n    },\n\n    /**\r\n     * @description 处理粘贴操作\r\n     */\n    handleContentChanged: function handleContentChanged(content) {\n      var pasteData = content.trim();\n      this.$emit('on-content-change', pasteData);\n      var rows = pasteData.split(/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g).map(function (row) {\n        return row.split('\\t');\n      });\n      if (content === '') rows = [];\n      this.pasteDataArr = rows;\n      this.clearLineClass();\n      this.checkColNumInEveryRow();\n      this.$emit('input', this.pasteDataArr);\n    },\n\n    /**\r\n     * @description 检查除第一行的每一行列数是否与第一行相同\r\n     */\n    checkColNumInEveryRow: function checkColNumInEveryRow() {\n      var i = 0;\n      var len = this.rowNum;\n      if (len === 0) return;\n\n      while (++i < len) {\n        var item = this.pasteDataArr[i];\n\n        if (item.length !== this.colNum && (!(i === len - 1 && item.length === 1 && item[0] === '') || i !== len - 1)) {\n          this.markIncorrectRow(i);\n          this.$emit('on-error', i);\n          return false;\n        }\n      }\n\n      this.$emit('on-success', this.pasteDataArr);\n      return true;\n    },\n\n    /**\r\n     * @description 标记不符合格式的一行\r\n     */\n    markIncorrectRow: function markIncorrectRow(index) {\n      this.editor.addLineClass(index, 'text', 'incorrect-row');\n    },\n\n    /**\r\n     * @description 标记不符合格式的一行\r\n     */\n    clearLineClass: function clearLineClass() {\n      var _this = this;\n\n      forEach(this.pasteDataArr, function (item, index) {\n        _this.editor.removeLineClass(index, 'text', 'incorrect-row');\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    createPlaceholder(CodeMirror);\n    this.editor = CodeMirror.fromTextArea(this.$refs.codemirror, {\n      lineNumbers: true,\n      tabSize: 1,\n      lineWrapping: true,\n      placeholder: this.placeholder\n    });\n    this.editor.on('change', function (editor) {\n      _this2.handleContentChanged(editor.getValue());\n    });\n    this.editor.addLineClass(0, 'text', 'first-row');\n  }\n};",{"version":3,"sources":["paste-editor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"paste-editor-wrapper\">\r\n    <textarea ref=\"codemirror\" class=\"textarea-el\"></textarea>\r\n  </div>\r\n</template>\r\n<script>\r\nimport CodeMirror from 'codemirror'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport { forEach } from '@/libs/tools'\r\nimport createPlaceholder from './plugins/placeholder'\r\nexport default {\r\n  name: 'PasteEditor',\r\n  props: {\r\n    value: Array,\r\n    pasteData: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: '从网页或其他应用软件复制表格数据，粘贴到这里 。默认第一行是表头，使用回车键添加新行，使用Tab键区分列。'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      pasteDataArr: [],\r\n      rowArrLength: 0,\r\n      editor: null\r\n    }\r\n  },\r\n  watch: {\r\n    pasteData (val) {\r\n      if (val === '') {\r\n        this.editor.setValue('')\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    rowNum () {\r\n      return this.pasteDataArr.length\r\n    },\r\n    colNum () {\r\n      return this.pasteDataArr[0] ? this.pasteDataArr[0].length : 0\r\n    }\r\n  },\r\n  methods: {\r\n    handleKeyup (e) {\r\n      this.handleAreaData()\r\n    },\r\n    /**\r\n     * @description 处理粘贴操作\r\n     */\r\n    handleContentChanged (content) {\r\n      let pasteData = content.trim()\r\n      this.$emit('on-content-change', pasteData)\r\n      let rows = pasteData.split((/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g)).map(row => {\r\n        return row.split('\\t')\r\n      })\r\n      if (content === '') rows = []\r\n      this.pasteDataArr = rows\r\n      this.clearLineClass()\r\n      this.checkColNumInEveryRow()\r\n      this.$emit('input', this.pasteDataArr)\r\n    },\r\n    /**\r\n     * @description 检查除第一行的每一行列数是否与第一行相同\r\n     */\r\n    checkColNumInEveryRow () {\r\n      let i = 0\r\n      const len = this.rowNum\r\n      if (len === 0) return\r\n      while (++i < len) {\r\n        let item = this.pasteDataArr[i]\r\n        if (item.length !== this.colNum && (!(i === len - 1 && item.length === 1 && item[0] === '') || i !== len - 1)) {\r\n          this.markIncorrectRow(i)\r\n          this.$emit('on-error', i)\r\n          return false\r\n        }\r\n      }\r\n      this.$emit('on-success', this.pasteDataArr)\r\n      return true\r\n    },\r\n    /**\r\n     * @description 标记不符合格式的一行\r\n     */\r\n    markIncorrectRow (index) {\r\n      this.editor.addLineClass(index, 'text', 'incorrect-row')\r\n    },\r\n    /**\r\n     * @description 标记不符合格式的一行\r\n     */\r\n    clearLineClass () {\r\n      forEach(this.pasteDataArr, (item, index) => {\r\n        this.editor.removeLineClass(index, 'text', 'incorrect-row')\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    createPlaceholder(CodeMirror)\r\n    this.editor = CodeMirror.fromTextArea(this.$refs.codemirror, {\r\n      lineNumbers: true,\r\n      tabSize: 1,\r\n      lineWrapping: true,\r\n      placeholder: this.placeholder\r\n    })\r\n    this.editor.on('change', (editor) => {\r\n      this.handleContentChanged(editor.getValue())\r\n    })\r\n    this.editor.addLineClass(0, 'text', 'first-row')\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\">\r\n@import './paste-editor.less';\r\n</style>\r\n"],"sourceRoot":"src\\components\\paste-editor"}]}