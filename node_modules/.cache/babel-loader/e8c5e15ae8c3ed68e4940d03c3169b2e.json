{"remainingRequest":"C:\\work\\code\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\code\\iview-admin\\src\\view\\main\\components\\tags-nav\\tags-nav.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\code\\iview-admin\\src\\view\\main\\components\\tags-nav\\tags-nav.vue","mtime":1535094297808},{"path":"C:\\work\\code\\iview-admin\\.babelrc","mtime":1535094296553},{"path":"C:\\work\\code\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535091260613},{"path":"C:\\work\\code\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\work\\code\\iview-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { showTitle, routeEqual } from '@/libs/util';\nexport default {\n  name: 'TagsNav',\n  props: {\n    value: Object,\n    list: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      tagBodyLeft: 0,\n      rightOffset: 40,\n      outerPadding: 4\n    };\n  },\n  computed: {\n    currentRouteObj: function currentRouteObj() {\n      var _this$value = this.value,\n          name = _this$value.name,\n          params = _this$value.params,\n          query = _this$value.query;\n      return {\n        name: name,\n        params: params,\n        query: query\n      };\n    }\n  },\n  methods: {\n    handlescroll: function handlescroll(e) {\n      var type = e.type;\n      var delta = 0;\n\n      if (type === 'DOMMouseScroll' || type === 'mousewheel') {\n        delta = e.wheelDelta ? e.wheelDelta : -(e.detail || 0) * 40;\n      }\n\n      this.handleScroll(delta);\n    },\n    handleScroll: function handleScroll(offset) {\n      var outerWidth = this.$refs.scrollOuter.offsetWidth;\n      var bodyWidth = this.$refs.scrollBody.offsetWidth;\n\n      if (offset > 0) {\n        this.tagBodyLeft = Math.min(0, this.tagBodyLeft + offset);\n      } else {\n        if (outerWidth < bodyWidth) {\n          if (this.tagBodyLeft < -(bodyWidth - outerWidth)) {\n            this.tagBodyLeft = this.tagBodyLeft;\n          } else {\n            this.tagBodyLeft = Math.max(this.tagBodyLeft + offset, outerWidth - bodyWidth);\n          }\n        } else {\n          this.tagBodyLeft = 0;\n        }\n      }\n    },\n    handleTagsOption: function handleTagsOption(type) {\n      var _this = this;\n\n      if (type === 'close-all') {\n        // 关闭所有，除了home\n        var res = this.list.filter(function (item) {\n          return item.name === 'home';\n        });\n        this.$emit('on-close', res, 'all');\n      } else {\n        // 关闭除当前页和home页的其他页\n        var _res = this.list.filter(function (item) {\n          return routeEqual(_this.currentRouteObj, item) || item.name === 'home';\n        });\n\n        this.$emit('on-close', _res, 'others', this.currentRouteObj);\n        setTimeout(function () {\n          _this.getTagElementByName(_this.currentRouteObj.name);\n        }, 100);\n      }\n    },\n    handleClose: function handleClose(current) {\n      var res = this.list.filter(function (item) {\n        return !routeEqual(current, item);\n      });\n      this.$emit('on-close', res, undefined, current);\n    },\n    handleClick: function handleClick(item) {\n      this.$emit('input', item);\n    },\n    showTitleInside: function showTitleInside(item) {\n      return showTitle(item, this);\n    },\n    isCurrentTag: function isCurrentTag(item) {\n      return routeEqual(this.currentRouteObj, item);\n    },\n    moveToView: function moveToView(tag) {\n      var outerWidth = this.$refs.scrollOuter.offsetWidth;\n      var bodyWidth = this.$refs.scrollBody.offsetWidth;\n\n      if (bodyWidth < outerWidth) {\n        this.tagBodyLeft = 0;\n      } else if (tag.offsetLeft < -this.tagBodyLeft) {\n        // 标签在可视区域左侧\n        this.tagBodyLeft = -tag.offsetLeft + this.outerPadding;\n      } else if (tag.offsetLeft > -this.tagBodyLeft && tag.offsetLeft + tag.offsetWidth < -this.tagBodyLeft + outerWidth) {\n        // 标签在可视区域\n        this.tagBodyLeft = Math.min(0, outerWidth - tag.offsetWidth - tag.offsetLeft - this.outerPadding);\n      } else {\n        // 标签在可视区域右侧\n        this.tagBodyLeft = -(tag.offsetLeft - (outerWidth - this.outerPadding - tag.offsetWidth));\n      }\n    },\n    getTagElementByName: function getTagElementByName(name) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.refsTag = _this2.$refs.tagsPageOpened;\n\n        _this2.refsTag.forEach(function (item, index) {\n          if (name === item.name) {\n            var tag = _this2.refsTag[index].$el;\n\n            _this2.moveToView(tag);\n          }\n        });\n      });\n    }\n  },\n  watch: {\n    '$route': function $route(to) {\n      this.getTagElementByName(to.name);\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    setTimeout(function () {\n      _this3.getTagElementByName(_this3.$route.name);\n    }, 200);\n  }\n};",null]}